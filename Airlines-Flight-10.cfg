//Airlines-Flight-10 - KSC Airlines: Charter Flight 10 - Crew Rotation: 2

CONTRACT_TYPE
{


//REQUIREMENTS FOR CONTRACT TO APPEAR

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		
		contractType = KSP-IslandPrep
		minCount = 1

	}

	
//DATA NODES TO PROCESS FOR CONTRACT USE

//Outbound Passenger Data
	DATA
	{
		type = int
		
		numPassengersOutbound = Random(2, 2)
	
	}
	
	DATA
	{
		type = List<Kerbal>
		
		kerbalsOutbound = [ NewKerbal(), NewKerbal(), NewKerbal(), NewKerbal(), NewKerbal(), NewKerbal() ].Random(@numPassengersOutbound)
		
	}
	
	//sets plural indicator, if true use element 0 in the string
	DATA
	{
		type = int
		
		plural = @numPassengersOutbound > 1 ? 1 : 0
	}
	
	DATA
	{
		type = List<String>
		
		pluralSeats = [ "seat" , "seats" ]
		
	}
	
	DATA
	{
		type = List<String>
		
		pluralPassengers = [ "passenger" , "passengers" ]
		
	}
	
//Inbound Passenger Data
	DATA
	{
		type = int
		
		numPassengersInbound = Random(2, 2)

	}
	
	DATA
	{
		type = List<Kerbal>
		
		kerbalsOnIsland = [ NewKerbal(), NewKerbal() ]
		
	}
	
	DATA
	{
		type = List<Kerbal>
		
		kerbalsInbound = @kerbalsOnIsland.Random(@numPassengersInbound)
		
	}

	//sets plural indicator, if true use element 0 in the string
	DATA
	{
		type = int
		
		pluralInbound = @numPassengersInbound > 1 ? 1 : 0
	}
	
	DATA
	{
		type = List<String>
		
		pluralPassengersInbound = [ "passenger" , "passengers" ]
		
	}
	

//CONTRACT DESCRIPTION

	name = Airlines-Flight-10
	title = Charter Flight 10 - Crew Rotation: @/numPassengersOutbound
	group = KSC Airlines
	agent = KSC Airlines

	description = Scientists and engineers often head out to KSC Island to work on various projects, and tourists to KSC know the island as one of the best places to camp out and watch launches. Fly out @/numPassengersOutbound passengers to KSC Island, and exchange them with @/numPassengersInbound passengers waiting there for a return trip to KSC.

	synopsis = Part of a series of regular flights to KSC Island. The pay is low, but at least it's steady.

	notes = Fly @/numPassengersOutbound passengers to KSC Island, drop them off and exchange them for two waiting passengers on the island, and return to KSC.

	completedMessage = Flight Completed! Snacks served: 2. Air sickness bags unused: 1. KSC Airlines thanks you for flying the friendly skies.

//Contract Limits
   	maxCompletions = 0
   	maxSimultaneous = 1
	weight = 10.0

	autoAccept = false
	declinable = true
	cancellable = true

	minExpiry = 7.0
	maxExpiry = 7.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
   	targetBody = Kerbin

//Contract Rewards
  	advanceFunds = 5000.0
  	rewardFunds = 10000.0
  	rewardReputation = 1.0
 	rewardScience = 1.0

//Contract Penalties
  	failureFunds = 20000.0
 	failureReputation = 20.0


//BEHAVIOURS TO DO WHEN CREATING CONTRACT

	BEHAVIOUR
	{
		name = SpawnOutboundPassengers
		type = SpawnPassengers
		
		kerbal = @/kerbalsOutbound
		
		kerbalType = Crew
		
	}
	
	BEHAVIOUR
	{
		name = SpawnKerbalsOnIsland
		type = SpawnKerbal

		KERBAL
		{
			kerbal = @/kerbalsOnIsland.ElementAt(0)
			owned = false
			addToRoster = false
			
			pqsCity = IslandAirfield
			pqsOffset = -130.997359523775, -175.815974214336, 18.0997077854
			alt = 133.103743439424
			heading = 310
			
		}
		
		KERBAL
		{
			kerbal = @/kerbalsOnIsland.ElementAt(1)
			owned = false
			addToRoster = false
			
			pqsCity = IslandAirfield
			pqsOffset = -132.753837420853, -175.768306999687, 18.09969760210
			alt = 133.126783730113
			heading = 310
			
		}
		
	}

	BEHAVIOUR
	{
        	name = WaypointGenerator
        	type = WaypointGenerator
       
		WAYPOINT       
		{
        	name = KSC Island Airfield          
			icon = marker
			latitude = -1.51971636955524
			longitude = 288.114196483849
			altitude = 100
			
			//PQS: IslandAirfield -129.870222771593, -227.36909617722, 25.4157831746222 (new point entirely, so test on conversion)
		}
	
	}
	
	BEHAVIOUR
	{
        name = WaypointGenerator
        type = WaypointGenerator
		
		PQS_CITY
		{
			name = KSC Island Airfield
			icon = marker
			
			pqsCity = IslandAirfield
			pqsOffset = -129.870222771593, -227.36909617722, 25.4157831746222
			altitude = 100
			
		}
	
	}

	
//PARAMETERS FOR CONTRACT COMPLETION

//Craft definition
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Your aircraft must
		
		define = craft
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = Any
			type = Any
			title = have a certified engineer or pilot
			
			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				
				trait = Pilot
				minCrew = 1
				
				hideChildren = true
				disableOnStateChange = false
				
			}
			
			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				
				trait = Engineer
				minCrew = 1
				
				disableOnStateChange = false
				hideChildren = true
				
			}
			
			disableOnStateChange = false
			hideChildren = true
			
		}
		
		PARAMETER
		{
			name = HasCrewCapacity
			type = HasCrewCapacity
			title = have at least @/numPassengersOutbound passenger @/pluralSeats.ElementAt(@/plural)
			
			minCapacity = @/numPassengersOutbound + 1
			
			disableOnStateChange = false
			
		}
		
		disableOnStateChange = false

	}

//Passenger Manifest - Load Outbound Passengers
	PARAMETER
	{
		name = All
		type = All
		
		title = load @/pluralPassengers.ElementAt(@/plural)
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbalsOutbound
				
			}
			
			hideChildren = true
			
		}

	}
	
//Contract Goals
//Navigate to waypoint requirement include landing to a complete stop
	PARAMETER
	{
		name = LandatIslandAirfield
		type = All
		title = land at the KSC Island airfield

		PARAMETER
		{
			name = VisitWaypoint
			type = VisitWaypoint
			index = 0

			distance = 300
			hideOnCompletion = true
			
			completeInSequence = true
			disableOnStateChange = true
			hideChildren = true
			
		}
		
		PARAMETER
		{			            
			name = ReachState   
			type = ReachState

			situation = LANDED
			maxSpeed = 0.0
			
			completeInSequence = true
			disableOnStateChange = true
			hideChildren = true
			
		}

		completeInSequence = true
		hideChildren = true
	
	}
	
//Passenger Manifest - Unload Outbound Passengers
	PARAMETER
	{
		name = Not
		type = Not
		title = unload @/pluralPassengers.ElementAt(@/plural)
	
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbalsOutbound
				
			}
			
			hideChildren = true
			
		}
		
		completeInSequence = true
		disableOnStateChange = false

	}
	
//Passenger Manifest - Load Inbound Passengers
	PARAMETER
	{
		name = All
		type = All
		
		title = load @/pluralPassengersInbound.ElementAt(@/pluralInbound)
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbalsInbound.Random(@/numPassengersInbound)
				
			}
			
			hideChildren = true
			
		}

	}

//Recovery Parameter - Landing
	PARAMETER
	{
		name = Any
		type = Any
		title = and then land back at KSC
		
		PARAMETER
		{
			name = Any
			type = Any
			title = on either

			PARAMETER
			{
				name = VesselParameterGroup
				type = VesselParameterGroup
				title = the KSC runway
				
				vessel = craft

			PARAMETER
				{
					name = ReachState
					type = ReachState
					
					targetBody = Kerbin
					biome = Runway
					situation = LANDED
					maxSpeed = 0.0

					disableOnStateChange = false
					hideChildren = true

				}

				hideChildren = true		

			}
			
			PARAMETER
			{
				name = VesselParameterGroup
				type = VesselParameterGroup
				title = the Vehicle Assembly Building helipad
				
				vessel = craft

			PARAMETER
				{
					name = ReachState
					type = ReachState
					
					targetBody = Kerbin
					biome = VAB Main Building
					situation = LANDED
					maxSpeed = 0.0

					disableOnStateChange = false
					hideChildren = true

				}

				hideChildren = true		

			}
			
			PARAMETER
			{
				name = VesselParameterGroup
				type = VesselParameterGroup
				title = or the Administration Building helipad
				
				vessel = craft

				PARAMETER
				{
					name = ReachState
					type = ReachState

					targetBody = Kerbin
					biome = Administration	
					situation = LANDED
					maxSpeed = 0.0
					
					disableOnStateChange = false
					hideChildren = true
					
				}

				hideChildren = true	

			}
		
		}

	}

//Recovery Parameter - Craft & Kerbal Safety Check
	PARAMETER
	{
		name = All
		type = All
		title = safely
		
		completeInSequence = true
		disableOnStateChange = true
		
		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft
			
			vessel = craft

		}
		
		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone
			
			countMax = 1

		}
		
	}

	PARAMETER
	{
		name = All
		type = All
		title = and recover
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbalsInbound
				
			}
			
			hideChildren = true
			
		}
		
	}
	
}
